<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="prj">  

  <select id="nextvalId">
      SELECT nextval(#{id}) FROM DUAL;
  </select>

  <select id="selectPrj">
    SELECT prj_id
    FROM project
    WHERE prj_id = #{prj_id}
  </select>

  <select id="selectPrjVersion">
    SELECT *
    FROM project_version
    WHERE prj_id = #{prj_id}
    AND version_number = #{version_number}
  </select>

  <insert id="insertPrj">
    INSERT INTO project
    (
        prj_id
      , prj_name
      , prj_description
      , prj_start_version
    )
    VALUES
    (
        #{prj_id}
      , #{prj_name}
      , #{prj_description}
      , #{prj_start_version}
    )
  </insert>

  <insert id="insertPrjVersion">
    INSERT INTO project_version
    (
        version_id
      , prj_id
      , prj_name
      , prj_description
      , version_number
    )
    VALUES
    (
        #{version_id}
      , #{prj_id}
      , #{prj_name}
      , #{prj_description}
      , #{version_number}
    )
  </insert>
  
  <insert id="insertPrjStepCreate">
    INSERT INTO project_step
    (
        step_id
      , prj_id
      , version_number
      , step_number
      , step_status
    ) 
    VALUES
    (
        #{step_id}
      , #{prj_id}
      , #{version_number}
      , #{step_number}
      , #{step_status}
    )
  </insert>

  <insert id="insertPrjHistoryCreate">
    INSERT INTO project_history
    (
        history_id
      , prj_id
      , version_number
      , step_number
      , step_status
      , step_url
      , step_file
      , step_comment
    ) 
    VALUES
    (
        #{history_id}
      , #{prj_id}
      , #{version_number}
      , #{step_number}
      , #{step_status}
      , #{step_url}
      , #{step_file}
      , #{step_comment}
    )
  </insert>

  <insert id="insertPrjFile">
    INSERT INTO project_file
    (
        file_id
      , prj_id
      , version_number
      , file_path
    ) 
    VALUES
    (
        #{file_id}
      , #{prj_id}
      , #{version_number}
      , #{file_path}
    )
  </insert>

  <select id="selectPrjDetail">
    SELECT  a.prj_id                                     AS prjId
          , a.prj_name                                   AS prjName
          , a.prj_description                            AS prjDescription
          , b.user_name                                  AS prjSecUserName
          , a.prj_sec_user                               AS prjSecUserId
          , c.user_name                                  AS prjDevUserName
          , a.prj_dev_user                               AS prjDevUserId
          , e.version_number                             AS versionNumber
          , d.step_number                                AS stepNumber
          , d.step_status                                AS stepStatus
          , d.step_file                                  AS stepFile
    FROM project a
    LEFT JOIN user_info b ON FIND_IN_SET(b.user_id, a.prj_sec_user) > 0
    LEFT JOIN user_info c ON FIND_IN_SET(c.user_id, a.prj_dev_user) > 0
    LEFT JOIN project_step d
    LEFT JOIN project_version e
    WHERE a.prj_id = #{prj_id}
  </select>

  <select id="selectPrjList">
    SELECT p.prj_id AS prjId
         , p.prj_name AS prjName
         , GROUP_CONCAT(DISTINCT ps.version_number) AS versionNumber
         , GROUP_CONCAT(DISTINCT ps.step_number) AS stepNumber
         , GROUP_CONCAT(DISTINCT ps.step_status) AS stepStatus
         , GROUP_CONCAT(DISTINCT u.user_id) AS developersId
         , GROUP_CONCAT(DISTINCT u.user_name) AS developers
         , GROUP_CONCAT(DISTINCT sm.user_id) AS securityIds
         , GROUP_CONCAT(DISTINCT sm.user_name) AS securityManagers
         , GROUP_CONCAT(DISTINCT ps.rgst_dtm) AS rgstDtm
         , GROUP_CONCAT(DISTINCT ps.updt_dtm) AS updtDtm
    FROM project p, project_develop_manager pdm, user_info u,
         project_security_manager psm, user_info sm, project_step ps, project_version pv
    WHERE p.prj_id = pdm.prj_id
    AND pdm.dev_id = u.user_id
    AND p.prj_id = psm.prj_id
    AND psm.sec_id = sm.user_id
    AND p.prj_id = ps.prj_id
    AND p.prj_id = pv.prj_id
    <if test=" user_id != 1 and user_id != undefined">
    AND p.prj_id IN (
      SELECT pdm2.prj_id
      FROM project_develop_manager pdm2
      JOIN project p2 ON pdm2.prj_id = p2.prj_id
      WHERE pdm2.dev_id = #{user_id}
      UNION
      SELECT psm2.prj_id
      FROM project_security_manager psm2
      JOIN project p3 ON psm2.prj_id = p3.prj_id
      WHERE psm2.sec_id = #{user_id}
    )
    </if>
    GROUP BY p.prj_id
    ORDER BY p.prj_id DESC
    LIMIT ${page_no}, 10
  </select>

  <select id="selectPrjAll">
    SELECT a.prj_id
         , a.prj_name
         , a.prj_description
         , a.version_number
         , b.step_number
         , b.step_status
         , b.rgst_dtm
         , b.updt_dtm
    FROM project_version a, project_step b
    WHERE a.prj_id = b.prj_id
    AND a.version_number = b.version_number
    ORDER BY b.rgst_dtm DESC
    LIMIT ${page_no} , 10;
  </select>

  <select id="selectPrjDevUser">
    SELECT a.prj_id
         , a.version_number
         , GROUP_CONCAT(a.dev_id) AS dev_ids  
         , GROUP_CONCAT(b.user_name) AS user_name  
    FROM project_develop_manager a, user_info b
    WHERE a.dev_id = b.user_id
    GROUP BY prj_id, version_number
  </select>

  <select id="selectPrjSecUser">
    SELECT a.prj_id
         , a.version_number 
         , GROUP_CONCAT(a.sec_id) AS sec_ids  
         , GROUP_CONCAT(b.user_name) AS user_name  
    FROM project_security_manager a, user_info b
    WHERE a.sec_id = b.user_id
    GROUP BY prj_id, version_number
  </select>

  <select id="selectPrjFile">
    SELECT a.file_path 
    FROM project_file a
    WHERE prj_id = #{prj_id}
    AND version_number = #{version_number}
  </select>

  <select id="selectPrjCount">
    SELECT p.prj_id AS prjId
    FROM project p, project_develop_manager pdm, user_info u,
         project_security_manager psm, user_info sm, project_step ps
    WHERE p.prj_id = pdm.prj_id
    AND pdm.dev_id = u.user_id
    AND p.prj_id = psm.prj_id
    AND psm.sec_id = sm.user_id
    AND p.prj_id = ps.prj_id
    <if test="user_id != undefined">
    AND p.prj_id IN (
      SELECT pdm2.prj_id
      FROM project_develop_manager pdm2
      JOIN project p2 ON pdm2.prj_id = p2.prj_id
      WHERE pdm2.dev_id = #{user_id}
      UNION
      SELECT psm2.prj_id
      FROM project_security_manager psm2
      JOIN project p3 ON psm2.prj_id = p3.prj_id
      WHERE psm2.sec_id = #{user_id}
    )
    </if>
    GROUP BY p.prj_id
    ORDER BY p.prj_id DESC
  </select>

  <select id="selectPrjListCount">
    SELECT a.prj_id
         , a.prj_name
         , a.prj_description
         , a.version_number
         , b.step_number
         , b.step_status
         , b.rgst_dtm
         , b.updt_dtm
    FROM project_version a, project_step b
    WHERE a.prj_id = b.prj_id
    AND a.version_number = b.version_number
    ORDER BY b.rgst_dtm DESC
  </select>

  <select id="selectPrjHistory">
    SELECT a.prj_id
         , a.prj_name
         , a.prj_description
         , a.version_number
         , b.step_number
         , b.step_status
         , b.rgst_dtm
         , b.updt_dtm
    FROM project_version a, project_step b
    WHERE a.prj_id = #{prj_id}
    AND a.prj_id = b.prj_id
    AND a.version_number = b.version_number
    ORDER BY b.rgst_dtm DESC
    LIMIT ${page_no} , 10;
  </select>

  <select id="selectPrjHistoryCount">
    SELECT a.prj_id
    FROM project_version a, project_step b
    WHERE a.prj_id = #{prj_id}
    AND a.prj_id = b.prj_id
    AND a.version_number = b.version_number
    ORDER BY b.rgst_dtm DESC
  </select>

  <select id="selectPrjVersionDetail">
    SELECT a.prj_id
         , a.prj_name
         , a.prj_description
         , a.version_number
         , b.step_number
         , b.step_status
         , b.rgst_dtm
         , b.updt_dtm
    FROM project_version a, project_step b
    WHERE a.prj_id = b.prj_id
    AND a.version_number = b.version_number
    <if test="prj_id != undefined">
    AND a.prj_id = #{prj_id}
    </if>
    <if test="version_number != undefined">
    AND a.version_number = #{version_number}
    </if>
  </select>

  <select id="selectPrjStep">
    SELECT step_id             AS stepId
          , prj_id              AS prjId
          , version_number      AS versionNumber
          , step_number         AS stepNumber
          , step_status         AS stepStatus
          , step_url            AS stepUrl
          , step_file           AS stepFile
          , step_comment        AS stepComment
    FROM  project_step
    WHERE prj_id = #{prj_id}
    AND   version_number = #{version_number}
  </select>

  <insert id="insertPrjSecManager">
    INSERT INTO project_security_manager
    (
        prj_sec_id
      , prj_id
      , version_number
      , sec_id
    )
    VALUES
    (
        #{prj_sec_id}
      , #{prj_id}
      , #{version_number}
      , #{sec_id}
    )
  </insert>

  <insert id="insertPrjDevManager">
    INSERT INTO project_develop_manager
    (
        prj_dev_id
      , prj_id
      , version_number
      , dev_id
    )
    VALUES
    (
        #{prj_dev_id}
      , #{prj_id}
      , #{version_number}
      , #{dev_id}
    )
  </insert>

  <insert id="insertPrjStep">
    INSERT INTO project_step
    (
        step_id
      , prj_id
      , version_number
      , step_number
      , step_status
      , step_result_comment
      , step_result_file
      , step_result_url
    )
    VALUES
    (
        #{step_id}
      , #{prj_id}
      , #{version_number}
      , #{step_number}
      , #{step_status}
      , #{step_result_comment}
      , #{step_result_file}
      , #{step_result_url}
    )
    ON DUPLICATE KEY UPDATE
        step_number         = #{step_number}
      , step_status         = #{step_status}
      , step_result_comment = #{step_result_comment}
      , step_result_file    = #{step_result_file}
      , step_result_url     = #{step_result_url}
  </insert>

</mapper>